enum useRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String
  role                  useRole                @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  userdetails           userDetails?           @relation(fields: [userDetailsId], references: [id])
  Order                 Order[]
  Review                Review[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Cart                  Cart[]
  userDetailsId         String?
}

model userDetails {
  id        String  @id @default(cuid())
  address   Address @relation(fields: [addressId], references: [id])
  phone     String
  addressId String
  User      User[]
}

model Address {
  id          String        @id @default(cuid())
  line        String
  road        String
  city        String
  state       String
  pincode     String
  userDetails userDetails[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
